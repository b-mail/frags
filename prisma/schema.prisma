// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 유저 정보 테이블.
model User {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  email        String         @unique
  bio          String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  adminFrags   Frag[]
  joinedFrags  UserFragLink[]
  posts        Post[]
  comments     Comment[]
  likes        Like[]
  chats        Chat[]
  password     Password?
  refreshToken RefreshToken?
}

// 비밀번호 테이블.
model Password {
  id     Int    @id @default(autoincrement())
  userId Int    @unique
  digest String
  salt   String
  user   User   @relation(fields: [userId], references: [id])
}

// Frag 테이블.
// Frag은 여러 개의 글을 가지는 하나의 커뮤니티이다.
// 한 개의 Frag은 한 명의 관리자를 가진다.
model Frag {
  id          Int            @id @default(autoincrement())
  adminId     Int
  name        String         @unique
  description String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  admin       User           @relation(fields: [adminId], references: [id])
  members     UserFragLink[]
  posts       Post[]
  chats       Chat[]
}

// User 테이블과 Frag 테이블을 다대다 관계로 잇는 테이블.
// 추가적으로 특정 유저가 해당 Frag에 가입한 날짜, 방문 횟수, 마지막 방문 일자를 담고 있다.
model UserFragLink {
  id          Int      @id @default(autoincrement())
  userId      Int
  fragId      Int
  visitCount  Int      @default(0)
  joinAt      DateTime @default(now())
  lastVisitAt DateTime
  user        User     @relation(fields: [userId], references: [id])
  frag        Frag     @relation(fields: [fragId], references: [id])
}

// Frag 내의 글.
model Post {
  id        Int       @id @default(autoincrement())
  userId    Int
  fragId    Int
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  frag      Frag      @relation(fields: [fragId], references: [id])
  comments  Comment[]
  likes     Like[]
}

// 특정 Post에 달린 댓글을 저장할 테이블
model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

// 특정 Post에 대한 좋아요 정보를 저장할 테이블.
model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

// Frag 기능 중 하나인 유저 간의 채팅을 저장할 테이블
model Chat {
  id        Int      @id @default(autoincrement())
  userId    Int
  fragId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  frag      Frag     @relation(fields: [fragId], references: [id])
}

model RefreshToken {
  id     Int    @id @default(autoincrement())
  userId Int    @unique
  token  String @unique
  user   User   @relation(fields: [userId], references: [id])
}
